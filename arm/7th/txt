

驱动入口函数
	static int __init funname(void);
	static int funname(void) __init;
驱动出口函数
	static void __exit funname(void);

include/linux/init.h
	:/module_init

#define module_init(x)  __initcall(x); 表示告诉kernel的驱动入口函数
	x => test_init 


	187 #define pure_initcall(fn)       __define_initcall("0",fn,0)
	188 
	189 #define core_initcall(fn)       __define_initcall("1",fn,1)
	190 #define core_initcall_sync(fn)      __define_initcall("1s",fn,1s)
	191 #define postcore_initcall(fn)       __define_initcall("2",fn,2)
	192 #define postcore_initcall_sync(fn)  __define_initcall("2s",fn,2s)
	193 #define arch_initcall(fn)       __define_initcall("3",fn,3)
	194 #define arch_initcall_sync(fn)      __define_initcall("3s",fn,3s)
	195 #define subsys_initcall(fn)     __define_initcall("4",fn,4)
	196 #define subsys_initcall_sync(fn)    __define_initcall("4s",fn,4s)
	197 #define fs_initcall(fn)         __define_initcall("5",fn,5)
	198 #define fs_initcall_sync(fn)        __define_initcall("5s",fn,5s)
	199 #define rootfs_initcall(fn)     __define_initcall("rootfs",fn,rootfs)
	200 #define device_initcall(fn)     __define_initcall("6",fn,6)
	201 #define device_initcall_sync(fn)    __define_initcall("6s",fn,6s)
	202 #define late_initcall(fn)       __define_initcall("7",fn,7)
	203 #define late_initcall_sync(fn)      __define_initcall("7s",fn,7s)

	=>  __define_initcall("6",fn,6) => fn test_init

	=> #define __define_initcall(level,fn,id) \
	171     static initcall_t __initcall_##fn##id __used \
	172     __attribute__((__section__(".initcall" level ".init"))) = fn
		level => "6"
		id => 6

		typedef int (*initcall_t)(void);

		#define __exitcall(fn) \
		    static exitcall_t __exitcall_##fn __exit_call = fn

	__init 
	__exit

	#define __init      __section(.init.text) __cold notrace
	#define __initdata  __section(.init.data)
	#define __initconst __section(.init.rodata)
	#define __exitdata  __section(.exit.data)
	#define __exit_call __used __section(.exitcall.exit)

	开源协议 GPL


＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝
字符设备驱动注册(老式注册方法)
	注册：register_chrdev(iMAJOR, iNAME, &fops);
	销毁：unregiste_chrdev(iMAJOR, iNAME);

错误信息头文件
	基础错误：include/asm-generic/errno-base.h
	中级错误：include/asm-generic/errno.h
	高级错误：include/linux/errno.h

容错宏：include/linux/err.h
		ERR_PTR : int -> void*
		PTR_ERR : void * -> int
		IS_ERR  : check

==================================
一种普通链表 : 链表中包含数据
	struct llist_t{
		void *data;
		struct llist_t *next;
		struct llist_t *prev;
	};
一种内核链表 ： 数据中包含链表
	struct llist_t{
		struct llist_t *next;
		struct llist_t *prev;
	};

