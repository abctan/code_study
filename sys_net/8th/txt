
管道要确保双方都在线

消息队列
	发送端： 只负责发送，无论对方是否在线都可以发送
	接收端： 只负责接受

	1 获取创建消息队列关键字
		key_t ftok(const char *pathname, int proj_id);
		第一个参数：表示文件路径 inode
		第二个参数：表示用户输入序列号
		返回值：
			一般情况下，是把序列号转换16进制并保存到我关键字高位(8位)， 把文件inode节点号转换成16进制作为关键字低位(16位)组成起来作为关键字
	2 创建消息队列
		int msgget(key_t key, int msgflg);
		第一个参数：表示消息队列关键字
		第二个参数：表示创建消息队列标志位
			IPC_CREAT ： 表示创建
			IPC_EXCL  ： 表示判断消息队列是否存在，必须跟IPC_CREAT同时使用，
		返回值：
			成功：表示消息队列id
			失败：-1

	查看消息队列
		ipcs -q
	删除消息队列
		ipcrm -q msgid
		ipcrm -Q key

	3 发送消息
		int  msgsnd(int  msqid,  const void *msgp, size_t msgsz,
		       int msgflg);
		第一个参数：表示消息队列id
		第二个参数：表示发送数据空间地址
		第三个参数：表示数据大小
		第四个参数：表示标志位 0
		返回值：
			成功：0
			失败：-1

	4 接受数据
		ssize_t msgrcv(int msqid, void *msgp, size_t msgsz, long
		       msgtyp, int msgflg);
		第一个参数：表示消息队列id
		第二个参数：表示保存数据空间地址
		第三个参数：表示空间大小
		第四个参数：表示数据类型，如果不考虑数据类型 0
		第五个参数：表示标志位 0
		返回值：
			成功：表示接受了多少个字节
			失败：表示-1



	5 销毁消息队列
		int msgctl(int msqid, int cmd, struct msqid_ds *buf);
		第一个参数：表示消息队列描述符
		第二个参数：表示给消息队列下达指令
			IPC_STAT ： 表示获取消息队列属性
			IPC_SET  ： 表示设置消息队列属性
			IPC_RMID ： 表示销毁消息队列
===============================
共享内存：
	创建共享内存
	int shmget(key_t key, size_t size, int shmflg);

查看：
	ipcs -m
删除：
	ipcrm -m shmid
	ipcrm -M key

映射内核态空间到进程的空间地址中
	void *shmat(int shmid, const void *shmaddr, int shmflg);
	第一个参数：表示共享内存id
	第二个参数：表示映射空间地址 NULL
	第三个参数：表示标志位 0
	返回值：
		成功：指想系统分配空间地址
		失败：NULL

解映射 表示把共享内存从进程空间地址中删除
	int shmdt(const void *shmaddr);

销毁
	int shmctl(int shmid, int cmd, struct shmid_ds *buf);
		IPC_RMID


练习：
	1 父子进程循环操作数据 	while
	2 任意进化之间数据交换 	file
	3 传一个学生结构体		data
		memcpy 
		memmove


＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝
信号量：
	利用进程资源达到一种锁状态，也叫信号量锁

操作同一文件
	父子进程操作：=> wait
	多进程操作 ： => 
	10个进程 => 1000字符串 => 10000 ?


	1 创建信号量锁
		int semget(key_t key, int nsems, int semflg);
		第一个参数：表示关键字 ftok
		第二个参数：表示信号量锁个数
		第三个参数：表示标志位
		返回值：
			

	2 初始化锁变量
		int semctl(int semid, int semnum, int cmd, ...);
		第一个参数：表示信号量锁描述符
		第二个参数：表示锁的索引号 索引号从0开始
		第三个参数：表示指令
			SETVAL ： 表示设置锁变量
		...		 : 表示对命令补充
			正数：表示锁开启状态
			负数：表示锁关闭状态
		返回值：
			成功：0
			失败：－1
	3 设置加锁和解锁
		int  semop(int  semid,  struct  sembuf  *sops,  unsigned
		       nsops);
		第一个参数：表示信号量锁描述符
		第二个参数：表示信号量锁结构体
			表示锁索引号
			unsigned short sem_num;  /* semaphore number */
			表示加锁或者解锁
				正数：表示解锁
				负数：表示加锁
			short          sem_op;   /* semaphore operation */
			表示锁标志 0 快速互斥锁
			short          sem_flg;  /* operation flags */

		第三个参数：表示锁个数 1
		返回值：
			成功：0
			失败：－1












